{% macro render_excerpt(res, class=None) %}

    <a href="/{{ res.slug }}.html">
      <h2>{{ res.title }}</h2>
      {% if res.status %}
        <!-- <div class="progress-bar status-{{ res.phase }}" style="height: 2px; width: {{ res.status }}%;"></div> -->
      {% endif %}
    </a>

    <section>
      <em class="text-muted">By {{ res.author }} on <time datetime="{{ res.date.strftime('%Y-%m-%d') }}">{{ res.date.strftime('%a, %d %b %Y') }}</time> - <a href="{{ SITEURL }}/{{ res.slug }}.html#disqus_thread">Comments</a></em>
    </section>

    <section>
      {{ render_tags(res) }}
    </section>

    <section>
      {{ res.content|truncate(500) }}
    </section>

    <a href="/{{ res.slug }}.html">Read more...</a>

    <hr />

{% endmacro %}

{% macro render_tags(res) %}
  {% if res.tags %}
    <div class="tags">
      {% for tag in res.tags %}
        <a class="btn btn-outline-secondary btn-sm" href="/tag/{{ tag }}.html">{{ tag }}</a>
      {% endfor %}
    </div>
  {% endif %}
{% endmacro %}

{% macro render_map(myLocator, section, adifFile) -%}
<div id="container" style="width: 100%;">
  <canvas id="rateChart-{{ section }}" class="rate-chart"></canvas>
</div>
<div style="height: 450px" id="map-{{ section }}"></div>

<script src="/media/js/chartjs.plugin.annotation.js"></script>
<script src="/media/js/L.maidenheadcoloured.js"></script>
<script src="/media/js/L.fullscreen.js"></script>
<script>
  var myLocation = [];

  gridSquareToLatLon("{{ myLocator }}", myLocation);

  var osmLayer{{ section }} = L.tileLayer('//tileserver.eastus.cloudapp.azure.com/{id}/{z}/{x}/{y}.png', {
    attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery &copy; <a href="https://www.mapbox.com/">Mapbox</a>',
    maxZoom: 18,
    id: 'ham'
  });

  var lightTiles{{ section }} = L.tileLayer('//cartodb-basemaps-{s}.global.ssl.fastly.net/{id}/{z}/{x}/{y}.png', {
    attribution: 'Map tiles by Carto, under CC BY 3.0. Data by <a href="//www.openstreetmap.org/">OpenStreetMap</a>, under ODbL.',
    maxZoom: 18,
    id: 'light_all'
  });

  var darkTiles{{ section }} = L.tileLayer('//cartodb-basemaps-{s}.global.ssl.fastly.net/{id}/{z}/{x}/{y}.png', {
    attribution: 'Map tiles by Carto, under CC BY 3.0. Data by <a href="//www.openstreetmap.org/">OpenStreetMap</a>, under ODbL.',
    maxZoom: 18,
    id: 'dark_all'
  });

  var portableIcon = L.icon({
    iconUrl: '/media/svg/portable.svg',
    iconSize:     [30, 30], // size of the icon
    iconAnchor:   [15, 15], // point of the icon which will correspond to marker's location
    popupAnchor:  [0, -30] // point from which the popup should open relative to the iconAnchor
  });

  var mobileIcon = L.icon({
    iconUrl: '/media/svg/mobile.svg',
    iconSize:     [30, 30], // size of the icon
    iconAnchor:   [15, 15], // point of the icon which will correspond to marker's location
    popupAnchor:  [0, -30] // point from which the popup should open relative to the iconAnchor
  });

  var baseIcon = L.icon({
    iconUrl: '/media/svg/base.svg',
    iconSize:     [30, 30], // size of the icon
    iconAnchor:   [15, 15], // point of the icon which will correspond to marker's location
    popupAnchor:  [0, -30] // point from which the popup should open relative to the iconAnchor
  });

  var myIcon = L.icon({
    iconUrl: '/media/svg/me-portable.svg',
    iconSize:     [30, 30], // size of the icon
    iconAnchor:   [15, 15], // point of the icon which will correspond to marker's location
    popupAnchor:  [0, -30]  // point from which the popup should open relative to the iconAnchor
  });

  var heatmapLayer{{ section }} = L.heatLayer([], {radius: 80, maxZoom: 16});

  var stationsLayer{{ section }} = L.featureGroup([]);

  var gridLayer{{ section }} = L.maidenhead({ worked: [], confirmed: [] });
  gridLayer{{ section }}._map = map{{ section }};

  stationsLayer{{ section }}.addLayer(
    L.marker(
      [myLocation.lat, myLocation.lon],
      {icon: myIcon}
    ).bindPopup(
      "<b>{{ myLocator }}<br />"
    )
  );

  readTextFile("/media/logs/{{ adifFile }}.adi", function(log) {
    rate{{ section }} = {};
    opmode{{ section }} = [];
    var currMode = "s_p";
    var lastRunStart = "";

    rateGroupInterval = 5;   // Interval (in minutes) to group QSOs for the rate graph

    for(var i=0; i<log.length; i++) {
      if ( log[i].latitude && log[i].longitude ) {
        var added = false;
        for ( var j=0; j<heatmapLayer{{ section }}._latlngs.length; j++ ) {
          if ( heatmapLayer{{ section }}._latlngs[j][0] == log[i].latitude && heatmapLayer{{ section }}._latlngs[j][1] == log[i].longitude ) {
            var count = heatmapLayer{{ section }}._latlngs[j][2] + 1;
            console.log("In heatmap, setting count to " + count);
            heatmapLayer{{ section }}._latlngs[j] = [log[i].latitude, log[i].longitude, count];
            added = true;
          }
        }
        if ( !added ) {
          heatmapLayer{{ section }}.addLatLng([log[i].latitude, log[i].longitude, 1]);
        }

        console.log(heatmapLayer{{ section }});
        if ( log[i].callsign.endsWith("/P") ) {
          var iconType = portableIcon;
        } else if ( log[i].callsign.endsWith("/M") ) {
          var iconType = mobileIcon;
        } else {
          var iconType = baseIcon;
        }
          stationsLayer{{ section }}.addLayer(
            L.marker(
              [log[i].latitude, log[i].longitude],
              {icon: iconType}
            ).bindPopup(
              "<table>" +
              "<tr><th colspan=2><b>" + log[i].callsign + "</b></th></tr>" +
              "<tr><th>Locator:</th><td>" + log[i].locator + "</td></tr>" +
              "<tr><th>Date:</th><td>" + log[i].date.substr(0,4) + "-" + log[i].date.substr(4,2) + "-" + log[i].date.substr(6,2) + "</td></tr>" +
              "<tr><th>Time:</th><td>" + log[i].time.substr(0,2) +":" + log[i].time.substr(2,2) + "</td></tr>" +
              "<tr><th>TX:</th><td>" + log[i].rst_tx + " / " + log[i].serial_tx + "</td></tr>" +
              "<tr><th>RX:</th><td>" + log[i].rst_rx + " / " + log[i].serial_rx + "</td></tr>" +
              "</table>"
            )
          );
      } else if ( log[i].locator ) {
        latlng = gridSquareToLatLon(log[i].locator, log[i]);
        heatmapLayer{{ section }}.addLatLng([log[i].lat, log[i].lon, 1]);
      }

      // Add to grid shading
      if ( log[i].locator ) {
        gridLayer{{ section }}.grids.worked.push(log[i].locator);
      }
      gridLayer{{ section }}.redraw();

      // Add QSO to rate object
      rateKey = log[i].date + " " + Math.floor(parseInt(log[i].time) / rateGroupInterval) * rateGroupInterval;
      rateKey in rate{{ section }} ? rate{{ section }}[rateKey]++ : rate{{ section }}[rateKey] = 1;

      // Work out if we were running or S&P
      if ( i > 1 && i < (log.length-1) ) {
        if ( log[i].frequency == log[i+1].frequency || log[i].frequency == log[i-1].frequency ) {
          // in run mode
          if (currMode == "s_p") {
            // Start a new run session
            lastRunStart = log[i].date + " " + log[i].time;
            currMode = "run";
          } // else still running
        } else {
          if (currMode == "run") {
            // End a run session
            opmode{{ section }}.push([lastRunStart, log[i].date + " " + log[i].time]);
            currMode = "s_p";
          } // else still s_p
        }
      }
    }

    map{{ section }}.fitBounds(stationsLayer{{ section }}.getBounds().pad(0.5));

    console.log("rate", rate{{ section }});

    var chartData{{ section }} = {
      labels: Object.keys(rate{{ section }}),
      datasets: [{
        label: "QSOs per " + rateGroupInterval + " mins",
        backgroundColor: '#5695c8',
				borderColor: '#31517a',
				borderWidth: 1,
        fill: false,
				data: Object.values(rate{{ section }})
      },{
        label: "",
        backgroundColor: '#5695c8',
				borderColor: '#31517a',
				borderWidth: 1,
        fill: false,
				data: opmode{{ section }}
      }]
    };

    console.log("chartData", chartData{{ section }});


    // Draw the rate chart
    //window.onload = function() {
      var ctx{{ section }} = document.getElementById('rateChart-{{ section }}').getContext('2d');
      window.rateBarChart{{ section }} = new Chart(ctx{{ section }}, {
        type: 'line',
        data: chartData{{ section }},
        options: {
          responsive: true,
          run_periods: opmode{{ section }},
          chartArea: {
            backgroundColor: 'rgba(251, 85, 85, 0.4)'
          },
          legend: {
            position: 'top',
          },
          title: {
            display: true,
            text: '{{ section }} Rate Chart'
          },
          scales: {
            yAxes: [{
              ticks: {
                beginAtZero: true
              }
            }],
            xAxes: [{
              ticks:{
                callback: function(value, index, values) {
                  if ( index % 4 == 0 ) {
                    return moment(value, "YYYYMMDD HHmm").format("HHmm");
                  } else {
                    return '';
                  }
                }
              }
            }]
          }
        },
        plugins: {
          annotation: {
            drawTime: 'afterDatasetsDraw',
            annotations: [{
      				id: 'a-line-1', // optional
      				type: 'line',
      				mode: 'horizontal',
      				scaleID: 'y-axis-0',
      				value: '2',
      				borderColor: 'red',
      				borderWidth: 2,

      				// Fires when the user clicks this annotation on the chart
      				// (be sure to enable the event in the events array below).
      				onClick: function(e) {
      					// `this` is bound to the annotation element
      				}
      			}]
          }
        }
      });
      console.log("rate chart", window.rateBarChart{{ section }});
    //};
  });

  heatmapLayer{{ section }}.redraw();

  var basemaps{{ section }} = {"OpenStreetMap": osmLayer{{ section }}, "Carto Light": lightTiles{{ section }}, "Carto Dark": darkTiles{{ section }}};
  var overlayMaps{{ section }} = {"Grid": gridLayer{{ section }}, "Heatmap": heatmapLayer{{ section }}, "Stations": stationsLayer{{ section }}};

  var map{{ section }} = new L.map('map-{{ section }}', {
    zoom: 6,
    attributionControl: true,
    fullscreenControl: true,
    layers: [lightTiles{{ section }}, heatmapLayer{{ section }}, gridLayer{{ section }}, stationsLayer{{ section }}]
  });
  //map{{ section }}.setView([51.945732, -1.926986], 6);
  map{{ section }}.fitBounds(stationsLayer{{ section }}.getBounds().pad(0.5));

  L.control.layers(basemaps{{ section }}, overlayMaps{{ section }}).addTo(map{{ section }});

</script>

{% endmacro %}

{% macro render_stats(myLocator, section, adifFile) -%}
<div id="stats-{{ section }}">
  <p>Total QSOs: <span id="stats-{{ section }}-totalqsos">?</span></p>
  <p>Total Points: <span id="stats-{{ section }}-total">?</span> (<span id="stats-{{ section }}-points">?</span> QSO points + <span id="stats-{{ section }}-bonus">?</span> bonus points)</p>
  <p>ODX: <span id="stats-{{ section }}-odx">?</span></p>
</div>

<script>
  var myLocation = [];
  gridSquareToLatLon("{{ myLocator }}", myLocation);

  readTextFile("/media/logs/{{ adifFile }}.adi", function(log) {
    totalQsos = 0;
    odxDist = 0;
    points = 0;
    bonusSquares = [];
    odx = "";
    for(var i=0; i<log.length; i++) {
      if ( log[i].latitude && log[i].longitude ) {
        if ( distBetweenLocations(myLocation.lat, myLocation.lon, log[i].latitude, log[i].longitude) > odxDist ) {
          odxDist = distBetweenLocations(myLocation.lat, myLocation.lon, log[i].latitude, log[i].longitude);
          odx = log[i].callsign + " (" + log[i].locator + ", " + Math.round(odxDist) + "km)"
        }
      }
      if ( !bonusSquares.includes(log[i].locator.substring(0,4)) ) {
        bonusSquares.push(log[i].locator.substring(0,4));
      }
      totalQsos++;
      points += log[i].points;
    }
    document.getElementById("stats-{{ section }}-totalqsos").textContent = totalQsos;
    document.getElementById("stats-{{ section }}-points").textContent = points;
    document.getElementById("stats-{{ section }}-bonus").textContent = bonusSquares.length * 500;
    document.getElementById("stats-{{ section }}-total").textContent = points + bonusSquares.length * 500;
    document.getElementById("stats-{{ section }}-odx").textContent = odx;
  });
</script>

{% endmacro %}

{% macro render_nav(menu, cls=None) -%}
{% if menu -%}

<!-- Icon Bar (Sidebar - hidden on small screens) -->
<nav>
  <div class="w3-sidebar w3-bar-block w3-small w3-hide-small w3-center">
  <!-- Avatar image in top left corner -->
  <!-- <img src="/media/images/logo.png" style="width:100%"> -->

  {% for item in menu -%}
  {% set active = False -%}
  {% if item.type == 'page' -%}
      {% set active = (resource.url ==
          site.content.resource_from_relative_path(item.url).url) -%}
  {% else -%}
      {% set active = (node ==
          site.content.node_from_relative_path(item.url)) -%}
  {%- endif %}
  {% set classes = ['button', 'white'] -%}

  <a title="{{ item.description }}" href="/{{ item.slug }}.html" class="w3-bar-item w3-button w3-padding-large w3-hover-black">
    <i class="{{ item.icon }} w3-xxlarge"></i>
    <p>{{ item.name }}</p>
  </a>

  {%- endfor %}
  </div>

  <!-- Navbar on small screens (Hidden on medium and large screens) -->
  <div class="w3-top w3-hide-large w3-hide-medium" id="myNavbar">
    <div class="w3-bar w3-black w3-opacity w3-hover-opacity-off w3-center w3-small">
      {% for item in menu -%}
      {% set active = False -%}
      {% if item.type == 'page' -%}
          {% set active = (resource.url ==
              site.content.resource_from_relative_path(item.url).url) -%}
      {% else -%}
          {% set active = (node ==
              site.content.node_from_relative_path(item.url)) -%}
      {%- endif %}
      {% set classes = ['button', 'white'] -%}


      <a href="/{{ item.slug }}.html" class="w3-bar-item w3-button" style="width:25% !important">{{ item.name }}</a>

      {%- endfor %}
    </div>
  </div>
</nav>

{%- endif %}
{%- endmacro %}
